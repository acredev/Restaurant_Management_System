/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.65
 * Generated at: 2023-04-21 07:55:55 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp.find_005fid;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import leekangjo.signup;

public final class find_005fid_005fsecond_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("leekangjo.signup");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("	<head>\r\n");
      out.write("	    <meta charset=\"utf-8\">\r\n");
      out.write("	    <title>인증번호 인증 페이지</title>\r\n");
      out.write("	    <link href=\"../../css/LoginMain.css\" rel=\"stylesheet\">\r\n");
      out.write("	    <link href=\"../../css/buttonST.css\" rel=\"stylesheet\">\r\n");
      out.write("	</head>\r\n");
      out.write("	<body>\r\n");
      out.write("	");

	try
	{
		//JDBC 드라이버 연결
		Class.forName("com.mysql.jdbc.Driver");
		String db_address = "jdbc:mysql://127.0.0.1:3306/kyungmin_store";
		String db_username = "root";
		String db_pwd = "root";
		Connection connection = DriverManager.getConnection(db_address, db_username, db_pwd);
		        			
		// 문자열의 인코딩 방식 설정
		request.setCharacterEncoding("UTF-8");
		
		// 파라미터를 통해 받아온 값을 변수에 저장
		String user_tel = request.getParameter("tel");
		
		// MySQL로 전송하기 위한 문자열 insertQuery 변수 선언
		String insertQuery = "SELECT tel from kyungmin_store.member where tel=?;";
		
		// SQL 쿼리문을 실행 (MySQL로 전송)하기 위한 객체 선언
		PreparedStatement psmt = connection.prepareStatement(insertQuery);
		
		// 앞서 문자열 쿼리문을 선언했던 VALUES의 ? 값에 하나씩 삽입하여 전송
		psmt.setString(1, user_tel);
		
		ResultSet result = psmt.executeQuery();
		
		if (result.next() == true)
		{
		
      out.write("\r\n");
      out.write("		<form name=\"find_id_second\" action=\"find_id_result.jsp\" method=\"post\">\r\n");
      out.write("			<div class=\"outBox\">\r\n");
      out.write("	    		<div class=\"boxtitle\">\r\n");
      out.write("        			<img src=\"../../img/Logo4.png\" alt=\"\" class=\"loginImg\" onclick=\"location.href='../../index.html'\">\r\n");
      out.write("        			<h1>인증번호</h1>\r\n");
      out.write("    			</div>\r\n");
      out.write("				<div class=\"inputBox\">\r\n");
      out.write("    	    		<input type=\"number\" id=\"tell\" class=\"auto_verify\" name=\"telchk\" oninput=\"maxLengthCheck(this)\" maxlength=\"5\">\r\n");
      out.write("    	    		<input type=\"hidden\" id=\"tel\" name=\"tel\" value=");
      out.print(user_tel );
      out.write(">\r\n");
      out.write("        			<label for=\"verify\">인증번호 확인</label>\r\n");
      out.write("		    	</div>\r\n");
      out.write("    			<button type=\"button\" class=\"tagbarBT\" onclick=\"result()\">확인</button>\r\n");
      out.write("			</div>\r\n");
      out.write("			");

			signup signup_telchk = new signup();
        	
        	int chknum = signup_telchk.telchk(user_tel);
			
      out.write("\r\n");
      out.write("			<script type=\"text/javascript\">\r\n");
      out.write("				function result()\r\n");
      out.write("				{\r\n");
      out.write("					if (document.find_id_second.telchk.value == \"\" || document.find_id_second.telchk.length < 0)\r\n");
      out.write("					{\r\n");
      out.write("						alert (\"인증번호 입력 후 다시 시도해 주세요.\");\r\n");
      out.write("						document.find_id_second.telchk.focus();\r\n");
      out.write("					}\r\n");
      out.write("					else\r\n");
      out.write("					{\r\n");
      out.write("						if (");
      out.print(chknum);
      out.write(" == document.find_id_second.telchk.value)\r\n");
      out.write("						{\r\n");
      out.write("							alert(\"전화번호 본인인증이 완료되었습니다.\");\r\n");
      out.write("							document.find_id_second.submit();\r\n");
      out.write("						}\r\n");
      out.write("						else\r\n");
      out.write("						{\r\n");
      out.write("							alert(\"전화번호 본인인증이 실패했습니다. 처음부터 다시 시도해 주세요.\");\r\n");
      out.write("							setTimeout(function(){ window.location.href=\"find_id_first.jsp\"}, 100);\r\n");
      out.write("						}\r\n");
      out.write("					}\r\n");
      out.write("				}\r\n");
      out.write("			</script>\r\n");
      out.write("		</form>\r\n");
      out.write("		");

		}
		else
		{
      out.write("\r\n");
      out.write("			<script type=\"text/javascript\">\r\n");
      out.write("				alert(\"존재하지 않는 전화번호입니다. 다시 시도해 주세요.\");\r\n");
      out.write("				setTimeout(function() { window.location.href=\"find_id_first.jsp\"}, 100);\r\n");
      out.write("			</script>\r\n");
      out.write("		");

		}
	}
	catch (Exception ex)
	{
		out.println("오류가 발생했습니다. 오류 메시지 : " + ex.getMessage());
	}
	
      out.write("\r\n");
      out.write("	</body>\r\n");
      out.write("	<script src=\"../../js/FindJS.js\"></script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
