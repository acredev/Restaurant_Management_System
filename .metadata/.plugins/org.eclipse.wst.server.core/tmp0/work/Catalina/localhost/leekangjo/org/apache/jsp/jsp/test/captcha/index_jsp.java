/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.65
 * Generated at: 2023-05-25 16:39:45 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp.test.captcha;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("    ");

  String ctx = request.getContextPath(); //콘텍스트명 얻어오기.
  response.setHeader("Pragma-directive", "no-cache");
  response.setHeader("Cache-directive", "no-cache");
  response.setHeader("Pragma", "no-cache");
  response.setHeader("Cache-Control", "no-cache");
  response.setDateHeader("Expires",0);

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n");
      out.write("<meta http-equiv=\"Cache-Control\" content=\"no-cache\" />\r\n");
      out.write("<meta http-equiv=\"Pragma\" content=\"no-cache\" />\r\n");
      out.write("<meta http-equiv=\"Imagetoolbar\" content=\"no\" />\r\n");
      out.write("<script type=\"text/javascript\" src=\"//ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write(" /*\r\n");
      out.write("  * Captcha Image 요청\r\n");
      out.write("  * [주의] IE의 경우 CaptChaImg.jsp 호출시 매번 변하는 임의의 값(의미없는 값)을 파라미터로 전달하지 않으면\r\n");
      out.write("  * '새로고침'버튼을 클릭해도 CaptChaImg.jsp가 호출되지 않는다. 즉, 이미지가 변경되지 않는 문제가 발생한다.\r\n");
      out.write("  *  그러나 크롭의 경우에는 파라미터 전달 없이도 정상 호출된다.\r\n");
      out.write("  */\r\n");
      out.write(" function changeCaptcha() {\r\n");
      out.write("  //IE에서 '새로고침'버튼을 클릭시 CaptChaImg.jsp가 호출되지 않는 문제를 해결하기 위해 \"?rand='+ Math.random()\" 추가\r\n");
      out.write("  $('#catpcha').html('<img src=\"");
      out.print(ctx);
      out.write("./CaptChaImg.jsp?rand='+ Math.random() + '\"/>');\r\n");
      out.write(" }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(" function winPlayer(objUrl) {\r\n");
      out.write("  $('#audiocatpch').html(' <bgsound src=\"' + objUrl + '\">');\r\n");
      out.write(" }\r\n");
      out.write(" \r\n");
      out.write(" /*\r\n");
      out.write("  * Captcha Audio 요청\r\n");
      out.write("  * [주의] IE의 경우 CaptChaAudio.jsp 호출시 매번 매번 변하는 임의의 값(의미없는 값)을 파라미터로 전달하지 않으면\r\n");
      out.write("  * '새로고침'된 이미지의 문자열을 읽지 못하고 최초 화면 로드시 로딩된 이미지의 문자열만 읽는 문제가 발생한다.\r\n");
      out.write("  * 이 문제의 원인도 결국 매번 변하는 파라미터 없이는 CaptChaAudio.jsp가 호출되지 않기 때문이다.\r\n");
      out.write("  * 그러나 크롭의 경우에는 파라미터 전달 없이도 정상 호출된다. \r\n");
      out.write("  */\r\n");
      out.write(" function audioCaptcha() {\r\n");
      out.write("\r\n");
      out.write("   var uAgent = navigator.userAgent;\r\n");
      out.write("   var soundUrl = 'CaptChaAudio.jsp';\r\n");
      out.write("   if (uAgent.indexOf('Trident') > -1 || uAgent.indexOf('MSIE') > -1) {\r\n");
      out.write("       //IE일 경우 호출\r\n");
      out.write("       winPlayer(soundUrl+'?agent=msie&rand='+ Math.random());\r\n");
      out.write("   } else if (!!document.createElement('audio').canPlayType) {\r\n");
      out.write("       //Chrome일 경우 호출\r\n");
      out.write("       try { new Audio(soundUrl).play(); } catch(e) { winPlayer(soundUrl); }\r\n");
      out.write("   } else window.open(soundUrl, '', 'width=1,height=1');\r\n");
      out.write(" }\r\n");
      out.write(" \r\n");
      out.write(" //화면 호출시 가장 먼저 호출되는 부분\r\n");
      out.write(" $(document).ready(function() {\r\n");
      out.write("  \r\n");
      out.write("  changeCaptcha(); //Captcha Image 요청\r\n");
      out.write("  \r\n");
      out.write("  $('#reLoad').click(function(){ changeCaptcha(); }); //'새로고침'버튼의 Click 이벤트 발생시 'changeCaptcha()'호출\r\n");
      out.write("  $('#soundOn').click(function(){ audioCaptcha(); }); //'음성듣기'버튼의 Click 이벤트 발생시 'audioCaptcha()'호출\r\n");
      out.write("  \r\n");
      out.write("  //'확인' 버튼 클릭시\r\n");
      out.write("  $('#frmSubmit').click(function(){\r\n");
      out.write("      if ( !$('#answer').val() ) {\r\n");
      out.write("           alert('이미지에 보이는 숫자 또는 스피커를 통해 들리는 숫자를 입력해 주세요.');\r\n");
      out.write("      } else {\r\n");
      out.write("           $.ajax({\r\n");
      out.write("               url: 'CaptchaSubmit.jsp',\r\n");
      out.write("               type: 'POST',\r\n");
      out.write("               dataType: 'text',\r\n");
      out.write("               data: 'answer=' + $('#answer').val(),\r\n");
      out.write("               async: false,  \r\n");
      out.write("               success: function(resp) {\r\n");
      out.write("                    alert(resp);\r\n");
      out.write("                    $('#reLoad').click();\r\n");
      out.write("                    $('#answer').val('');\r\n");
      out.write("              }\r\n");
      out.write("         });\r\n");
      out.write("      }\r\n");
      out.write("  });\r\n");
      out.write(" });\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("  <div id=\"catpcha\">Wait...</div>\r\n");
      out.write("  <div id=\"audiocatpch\" style=\"display: none;\"></div>\r\n");
      out.write("\r\n");
      out.write("  <input id=\"reLoad\" type=\"button\" value=\"새로고침\" />\r\n");
      out.write("  <input id=\"soundOn\" type=\"button\" value=\"음성듣기\" />\r\n");
      out.write("  <br />\r\n");
      out.write("  <input type=\"text\" id=\"answer\" name=\"answer\" value=\"\" />\r\n");
      out.write("  <input type=\"button\" id=\"frmSubmit\" value=\"확인\" />\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
