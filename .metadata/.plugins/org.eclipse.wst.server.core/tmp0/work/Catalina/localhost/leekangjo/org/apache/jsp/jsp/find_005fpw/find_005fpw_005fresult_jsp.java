/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.65
 * Generated at: 2023-05-21 16:37:03 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp.find_005fpw;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import leekangjo.signup;
import leekangjo.randomPwd;

public final class find_005fpw_005fresult_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("leekangjo.randomPwd");
    _jspx_imports_classes.add("leekangjo.signup");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("	<head>\r\n");
      out.write("		<meta charset=\"UTF-8\">\r\n");
      out.write("		<meta name=\"viewport\" content=\"width-device-width,initial-scale-1.0,user-scalable=no\">\r\n");
      out.write("		<title>LEEKANGJO - 비밀번호 재설정</title>\r\n");
      out.write("		<link href=\"../../css/LoginMain.css\" rel=\"stylesheet\">\r\n");
      out.write("	    <link href=\"../../css/buttonST.css\" rel=\"stylesheet\">\r\n");
      out.write("	    <link rel=\"icon\" href=\"../../img/favicon1.png\" type=\"image/x-icon\" sizes=\"16x16\">\r\n");
      out.write("	</head>\r\n");
      out.write("	<body>\r\n");
      out.write("		");

		try
		{
			//JDBC 드라이버 연결
			Class.forName("com.mysql.jdbc.Driver");
			String db_address = "jdbc:mysql://127.0.0.1:3306/kyungmin_store";
			String db_username = "root";
			String db_pwd = "root";
			Connection connection = DriverManager.getConnection(db_address, db_username, db_pwd);
			
			// 문자열의 인코딩 방식 설정
			request.setCharacterEncoding("UTF-8");
			
			// 파라미터를 통해 받아온 값을 변수에 저장
			String user_id = request.getParameter("id");
			String user_tel = request.getParameter("tel");

			// 파라미터를 통해 받아온 값들이 없다면...
			if (user_id == null || user_id.isEmpty())
			{
      out.write("\r\n");
      out.write("				<form name=\"find_pw_result\">\r\n");
      out.write("					<div class=\"outBox\">\r\n");
      out.write("	    				<div class=\"boxtitle\">\r\n");
      out.write("        				<img src=\"../../img/Logo4_warning.png\" alt=\"\" class=\"loginImg\" onclick=\"location.href='../../index.jsp'\">\r\n");
      out.write("        				<h2>잘못된 접근입니다.</h2>\r\n");
      out.write("    				</div>\r\n");
      out.write("					</div>\r\n");
      out.write("				</form>\r\n");
      out.write("			");

			}
			// 파라미터를 통해 받아온 값들이 있다면...
			else
			{
				// 랜덤 문자열 비밀번호 생성을 위한 메서드 생성
				randomPwd randomPwd = new randomPwd();
			
				// user_tel 값을 넘기고 return된  랜덤 문자열 비밀번호 값을 저장
				String randomPwd_create = randomPwd.sendSMS(user_tel);
			
				// MySQL로 전송하기 위한 문자열 insertQuery 변수 선언
				String insertQuery = "UPDATE kyungmin_store.member SET pwd='" + randomPwd_create + "' WHERE id = '" + user_id + "';";
			
				// SQL 쿼리문을 실행 (MySQL로 전송)하기 위한 객체 선언
				PreparedStatement psmt = connection.prepareStatement(insertQuery);
				
				// 쿼리문을 전송해 받아온 정보를 result 객체에 저장
				int result = psmt.executeUpdate(insertQuery);
			
				System.out.println("=============================");
				System.out.println("회원아이디 : " + user_id);
				System.out.println("회원전번 : " + user_tel);
				System.out.println("임시비번 : " + randomPwd_create);
				System.out.println("결과값 : " + result);
			
				// 쿼리문을 통해 정상적으로 비밀번호 정보가 업데이트 되었다면...
				if (result == 1)
				{
      out.write("\r\n");
      out.write("					<form name=\"find_pw_result\" action=\"find_pw_result.jsp\" method=\"post\">\r\n");
      out.write("						<div class=\"outBox\">\r\n");
      out.write("	    					<div class=\"boxtitle\">\r\n");
      out.write("	        					<img src=\"../../img/Logo4.png\" alt=\"\" class=\"loginImg\" onclick=\"location.href='../../index.html'\">\r\n");
      out.write("        						<h1>비밀번호 재설정 결과</h1>\r\n");
      out.write("    						</div>\r\n");
      out.write("							<div id=\"prBox\" class=\"inputBox\">\r\n");
      out.write("								<h3>임시 비밀번호 발급이 완료되어 문자 메시지로 발송이 완료되었습니다.</h3>\r\n");
      out.write("        						<h4>임시 비밀번호로 로그인 후, 마이 페이지에서 비밀번호 변경 바랍니다.</h4>\r\n");
      out.write("        						<h5 onclick =\"location.href='../login/login_first.jsp'\">- 로그인페이지로 -</h5>\r\n");
      out.write("		    				</div>\r\n");
      out.write("						</div>\r\n");
      out.write("					</form>\r\n");
      out.write("				");

				}
				// 쿼리문을 통해 비밀번호 정보 업데이트에 실패했다면...
				else
				{
      out.write("\r\n");
      out.write("					<script type=\"text/javascript\">\r\n");
      out.write("						function()\r\n");
      out.write("						{\r\n");
      out.write("							alert(\"오류가 발생했습니다. 처음부터 다시 시도해 주세요.\");\r\n");
      out.write("							setTimeout(function() { window.loaction.href=\"../login/login_first.jsp\"}, 100)();\r\n");
      out.write("						}\r\n");
      out.write("					</script>\r\n");
      out.write("				");

				}
			}
		}
		// DB연결 오류가 발생했다면...
		catch (Exception ex)
		{
      out.write("\r\n");
      out.write("			<form name=\"find_pw_result\">\r\n");
      out.write("				<div class=\"outBox\">\r\n");
      out.write("	    			<div class=\"boxtitle\">\r\n");
      out.write("        				<img src=\"../../img/Logo4_warning.png\" alt=\"\" class=\"loginImg\" onclick=\"location.href='../../index.jsp'\">\r\n");
      out.write("        				<h2>오류가 발생했습니다.</h2>\r\n");
      out.write("        				<h3>오류 메시지 : ");
      out.print(ex.getMessage() );
      out.write("</h3>\r\n");
      out.write("    				</div>\r\n");
      out.write("				</div>\r\n");
      out.write("			</form>\r\n");
      out.write("		");

		}
      out.write("\r\n");
      out.write("	</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
